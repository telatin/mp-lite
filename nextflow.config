
manifest {
    name            = 'telatin/mp-lite'
    author          = 'Andrea Telatin'
    homePage        = 'https://github.com/telatin/mp-lite'
    description     = 'A Small Pipeline'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '1.0'
}
params {
    outdir   = './metaphage-lite/'
    tracedir = "${params.outdir}/pipeline_info"

    // Defaults only, expecting to be overwritten
    max_memory                 = '16.GB'
    max_cpus                   = 4
    max_time                   = '40.h'
}

process {

    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max( 4    * task.attempt, 'cpus'   ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    withLabel:process_low {
        cpus   = { check_max( 2      * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_filtering {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 48.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_mapping {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 48.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 31.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 48.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 16    * task.attempt, 'cpus'    ) }
        memory = { check_max( 96.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 40.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}


profiles {
    nbi {
        params.hostdb          = "/qib/platforms/Informatics/transfer/outgoing/databases/kraken2/homo"
        params.krakendb        = "/qib/platforms/Informatics/transfer/outgoing/databases/kraken2/kraken2_db_uhgg_v2/"

        process.container      = '/qib/platforms/Informatics/transfer/outgoing/singularity/cleanup-1.2.simg'
        
        params.max_memory      = '512.GB'
        params.max_cpus        = 32
        params.max_time        = '220.h'

        process.executor       = 'slurm'
        
        docker.enabled         = false
        singularity.enabled    = true
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }

    vmqib {
        params.hostdb          = "/qib/platforms/Informatics/transfer/outgoing/databases/kraken2/homo"
        params.krakendb        = "/qib/platforms/Informatics/transfer/outgoing/databases/kraken2/kraken2_db_uhgg_v2/"
        process.container      = '/qib/platforms/Informatics/transfer/outgoing/singularity/cleanup-1.2.simg'
        
        params.max_memory      = '180.GB'
        params.max_cpus        = 40
        params.max_time        = '220.h'

        process.executor       = 'local'
        
        docker.enabled         = false
        singularity.enabled    = true
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    local {
        params.hostdb          = "${baseDir}/DB/kraken2_human_db"
        params.krakendb        = "${baseDir}/DB/std8/"
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        process.container      = 'andreatelatin/cleanup:latest'
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        process.container = 'docker://andreatelatin/cleanup:latest'
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
